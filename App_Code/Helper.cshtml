@using System.Configuration
@using MySql.Data.MySqlClient
@using PasswordSecurity;

@helper Base64Image(byte[] bindata, string alt, bool available)
{
    if (bindata != null && bindata.Length > 0)
    {
        string Base64Prefix = "data:image/jpeg;base64,";
        string image = Base64Prefix + System.Convert.ToBase64String(bindata);

        // Diese Base64-codierte Repräsentation der Bilddatei wird dem Browser direkt übergeben
        if (available)
        {
<img class="square" alt="@alt" src="@image" />
        }
        else
        {
<img class="square unavailable" alt="@alt" src="@image" />
        }

    }
    else
    {
<p class="error">Es kann kein Bild gezeigt werden </p>
    }
}


@*
    - listet alle Zutaten auf
    - Benötigt geöffneten tbody
*@
@helper IngredientsHelper()
{
    string conString = ConfigurationManager.ConnectionStrings["dbConStr"].ConnectionString;
    MySqlConnection con = new MySqlConnection(conString);
    try
    {
        con.Open();
        MySqlCommand cmd;
        cmd = con.CreateCommand();
        cmd.CommandText = "SELECT id, name, glutenfree, bio, vegetarian, vegan FROM ingredients ORDER BY bio DESC,Name ASC;";
        MySqlDataReader r = cmd.ExecuteReader();
        while (r.Read()) //für jede id in der Tabelle incredients
        {
            ZutatenModel Z = new ZutatenModel();
            try
            {
                Z.ID = Convert.ToInt32(r["id"]);
                Z.Name = r["name"].ToString();
                //Z.Beschreibung = r["Beschreibung"].ToString(),
                Z.Bio = Convert.ToBoolean(r["bio"]);
                Z.Vegetarisch = Convert.ToBoolean(r["vegetarian"]);
                Z.Vegan = Convert.ToBoolean(r["vegan"]);
                Z.Glutenfrei = Convert.ToBoolean(r["glutenfree"]);
            }
            catch
            {
                Z.ID = 0;
                Z.Name = "";
                Z.Bio = false;
                Z.Vegetarisch = false;
                Z.Vegan = false;
                Z.Glutenfrei = false;
            }
            String Tooltipp = "Suchen sie nach '" + @Z.Name + "' im Web";
            String NameForWebSearch = "" + @Z.Name;
            NameForWebSearch = NameForWebSearch.Replace(" ", "%20");
<tr>
    <td><a href="@($"http://www.google.de/search?q={NameForWebSearch}")" target="_blank" title="@Tooltipp">@Z.Name @MarkBio(Z.Bio)</a></td>
    @*<td>@z.Beschreibung</td>*@
    <td>@FlagIcon(Z.Vegetarisch)</td>
    <td>@FlagIcon(Z.Vegan)</td>
    <td>@FlagIcon(Z.Glutenfrei)</td>
</tr>
        }
        r.Close();
        con.Close();
    }
    catch (Exception e)
    {
<tr><td>@e.Message</td></tr>
    }
}

@* Helper: zeichnet ein Kreis bzw. ein angecheckten Kreis abhängig eines übergebenen Bools *@
@helper FlagIcon(bool flag)
{
<i class="far @(flag ? "fa-check-circle" : "fa-circle")"></i>
}

@*Helper: fügt abhängig des übergebenen bools ein svg Bild ein*@
@helper MarkBio(bool bio)
{
    if (bio)
    {
<img src="~/img/bio.svg" height="25" alt="[BIO!]" />
    }
}

@*
    - Zeichnet (wenn Verbindung zur DB vorhanden) max. die ersten 8 Gericht sortiert nach der ID.
    - Wenn keine Verbindung zur DB besteht, dann wird die jeweilige Exception mit ausgegeben.
    - Die Anzahl der Gerichte kann direkt aus dem Query-String hier mit übergeben werden (zb. "6")
    - zu den ersten 8 IDs wird je ein Objekt der Klasse "GerichtModel" erzeugt.
*@
@helper ProductHelper(int categoryid, bool available, bool vegetarian, bool vegan)
{
    string conString = ConfigurationManager.ConnectionStrings["dbConStr"].ConnectionString;
    MySqlConnection con = new MySqlConnection(conString);
    try
    {
        con.Open();
        MySqlCommand cmd;
        cmd = con.CreateCommand();
        cmd.CommandText = @"SELECT * FROM `extended product view`";

        if (available || vegan || vegetarian || categoryid > 0)
        {
            cmd.CommandText += " WHERE";
        }
        if (available)
        {
            cmd.CommandText += " available = 1";
        }
        if (vegetarian)
        {
            if (available) { cmd.CommandText += " AND"; }
            cmd.CommandText += " VGT = 1";
        }
        if (vegan)
        {
            if (available || vegetarian) { cmd.CommandText += " AND"; }
            cmd.CommandText += " VGN = 1";
        }
        if (categoryid > 0)
        {
            if (available || vegetarian || vegan) { cmd.CommandText += " AND"; }
            cmd.CommandText += " category_id = " + categoryid;
        }
        cmd.CommandText += ";";
        MySqlDataReader r = cmd.ExecuteReader();
        int count = 0;
        while (r.Read() || (r.Read() && count < 8)) //für jede id in der Tabelle Products (jedoch max. 8) :
        {
            GerichtModel G = new GerichtModel();
            try
            {
                G.ID = Convert.ToInt32(r["id"]);
                G.Name = r["name"].ToString();
                G.Beschreibung = r["description"].ToString();
                G.Stock = Convert.ToInt32(r["stock"]);
                G.Verfuegbar = Convert.ToBoolean(r["available"]);
                G.Bilddaten = r["blob_data"];
                G.Bildtitel = r["alttext"].ToString();
            }
            catch
            {
                G.ID = 0;
                G.Name = "";
                G.Beschreibung = "";
                G.Stock = 0;
                G.Verfuegbar = false;
                G.Bilddaten = null;
                G.Bildtitel = "";
            }

<div class="col-3">
    @{
        @Helper.Base64Image((byte[])G.Bilddaten, G.Bildtitel, G.Verfuegbar);
        <p class="mb-0">@G.Name</p>

                    if (G.Verfuegbar)
                    {
        <a href="Detail.cshtml?id=@G.ID" class="mb-1">Details</a>
                    }
                    else
                    {
        <p>Vergriffen</p>
                    }
    }
</div>
            count++;
        }
        r.Close();
        con.Close();
    }
    catch (Exception e)
    {
<div class="col-12">
    @*<img title="Wok-Bild" class="square unavailable" alt="gericht" src="" />*@
    <p class="mb-0">@e.Message</p>
</div>
    }
}

@helper CreateCheckbox(string name, string label, bool b)
{
    if (b)
    {
<input type="checkbox" name="@name" value="true" checked><label class="choice ml-1">@label</label><br />
    }
    else
    {
<input type="checkbox" name="@name" value="true"><label class="choice ml-1">@label</label><br />
    }
}

@helper CategoryHelper(AllCategorysModel AllCategorys, KategorieModel CurrentCatagory)
{
    foreach (var Upper in AllCategorys.ListOfUpperCategorys)
    {
<optgroup label="@Upper">
    @foreach (var cat in AllCategorys.ListOfCategorys)
            {
                if (cat.UpperCategoryName == Upper)
                {

                    if (cat == CurrentCatagory)
                    {
    <option id="category-@cat.ID" value="@cat.ID" selected>@cat.Name</option>
                    }
                    else
                    {
    <option id="category-@cat.ID" value="@cat.ID">@cat.Name</option>
                    }
                }

            }
</optgroup>
    }
}

@helper Signin(string username, string passwort)
{
    string conString = ConfigurationManager.ConnectionStrings["dbConStr"].ConnectionString;
    MySqlConnection con = new MySqlConnection(conString);
    string GoodHash = "";
    String Role = "";
    try
    {
        //HASH_ALGORITHM_INDEX      = 0 = "sha1"
        //ITERATION_INDEX           = 1 = 64000 (laut Folien)
        //HASH_SIZE_INDEX           = 2 = 18 (laut Folien)
        //SALT_INDEX                = 3 =
        //PBKDF2_INDEX              = 4 = SALT
        //HASH_SECTIONS             = 5 = HASH
        con.Open();
        MySqlCommand cmd;
        cmd = con.CreateCommand();
        cmd.CommandText = "SELECT * FROM `extended user view` where loginname = '" + username + "'";

        MySqlDataReader r = cmd.ExecuteReader();
        if (r.Read()) //für jede id in der Tabelle incredients
        {
            Role = r["Rolle"].ToString();
            GoodHash = "sha1:64000:18:" + r["salt"].ToString() + ":" + r["hash"].ToString();
        }
        r.Close();
        con.Close();
    }
    catch
    {
        con.Close();
    }

    bool LoginSuccess = false;
    if (GoodHash != "")
    {
        LoginSuccess = PasswordSecurity.PasswordStorage.VerifyPassword(passwort, GoodHash);
    }

    if (LoginSuccess)
    {
        Session["user"] = username;
        Session["role"] = Role;
    }
    else
    {
        SignOut();
    }
}

@helper SignOut()
{
    Session["user"] = "";
    Session["role"] = "";
}

@helper DoPriceInformation(GerichtModel G)
{

    if (!String.IsNullOrEmpty(Session["user"] as String))
    {
        if (Session["role"].ToString() == "student")
        {
<b>Student-Preis</b><br />
<b id="preis">@G.Studentpreis &euro;</b>
        }
        else if (Session["role"].ToString() == "employee")
        {
<b>Mitarbeiter-Preis</b><br />
<b id="preis">@G.Mitarbeiterpreis &euro;</b>
        }
        else
        {
<b>Gast-Preis</b><br />
<b id="preis">@G.Gastpreis &euro;</b>
        }
    }
    else
    {
<b>Gast-Preis</b><br />
<b id="preis">@G.Gastpreis &euro;</b>
    }
}